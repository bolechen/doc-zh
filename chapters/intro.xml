<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 77f5f3b3a8bbe1ad7727201c7603d1419dd7840f Maintainer: HonestQiao Status: ready -->
<!-- CREDITS: gregory, Luffy, mowangjuanzi -->
 <chapter xml:id="introduction" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
   <titleabbrev>简介</titleabbrev>
   <title>PHP是什么并且可以做什么？</title>
  </info>

  <section xml:id="intro-whatis" annotations="chunk:false">
   <title>PHP 是什么？</title>
   <para>
    <acronym>PHP</acronym>（“<emphasis>PHP: Hypertext
    Preprocessor</emphasis>”，超文本预处理器的字母缩写）是一种被广泛应用的开放源代码的多用途脚本语言，它可嵌入到
    HTML中，尤其适合 web 开发。
   </para>
   <para>
    以上是一个简单的回答，不过这是什么意思呢？请看如下例子：
   </para>
   <para>
    <example>
     <info><title>一个介绍性的范例</title></info>
     <programlisting role="php">
<![CDATA[
<!DOCTYPE html>
<html>
    <head>
        <title>Example</title>
    </head>
    <body>

        <?php
        echo "Hi, I'm a PHP script!";
        ?>

    </body>
</html>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    PHP 页面并不包含大量输出 HTML 的命令（如 C 或 Perl 中所示），而是包含嵌入代码的 HTML，这些代码可执行<replaceable>某些</replaceable>操作（在本例中为输出
    <computeroutput>Hi, I'm a PHP script!</computeroutput>）。PHP 代码包含在特殊的<link
    linkend="language.basic-syntax.phpmode">开始和结束处理指令 <code>&lt;?php</code> 和 <code>?&gt;</code></link>
    中，允许跳入和退出 <quote>PHP 模式</quote>。
   </para>
   <para>
    和客户端的 JavaScript 不同的是，PHP
    代码是运行在服务端的。如果在服务器上建立了如上例类似的代码，则在运行该脚本后，客户端就能接收到其结果，但无法得知底层代码是什么。甚至可以将
    web 服务器设置成让 PHP 来处理所有的 HTML 文件，这么一来，用户就无法知道正在使用 PHP。
   </para>
   <para>
    使用 PHP 的最大的好处是它对于初学者来说极其简单，同时也给专业的程序员提供了各种高级的特性。当看到
    PHP 长长的特性列表时，请不要害怕。使用 PHP，几乎任何人都可以快速上手并编写简单的脚本。
   </para>
   <para>
    尽管 PHP 的开发主要侧重于服务器端脚本，但它可以做很多事情。请继续阅读，并在<link linkend="intro-whatcando">PHP
    能做什么？</link>章节中了解更多内容，或者直接转到<link linkend="tutorial">简明教程</link>，直接学习 Web 编程。
   </para>
  </section>

  <section xml:id="intro-whatcando" annotations="chunk:false">
   <info><title>PHP 能做什么？</title></info>
   <para>
    PHP 能做任何事。PHP 主要是用于服务端的脚本程序，因此可以用
    PHP 来完成任何其它的 CGI
    程序能够完成的工作，例如收集表单数据，生成动态网页，或者发送/接收
    Cookies。但 PHP 的功能远不局限于此。
   </para>
   <para>
    PHP 脚本主要用于以下两个领域：
    <itemizedlist>
     <listitem>
      <simpara>
       服务器端脚本。这是 PHP 使用最广泛、最主要的目标领域。开展这项工作需要具备以下三点：PHP 解析器（CGI
       或服务器模块）、Web 服务器和 Web 浏览器。所有这些都可以在本地机器上运行，以便尝试 PHP 编程。有关更多信息，请参阅<link
       linkend="install">安装说明</link>部分。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       命令行脚本。PHP 脚本无需任何服务器或浏览器即可运行，只需 PHP 解析器即可使用。这种方式非常适合使用 <command>cron</command>（在
       Unix 或 macOS 上）或任务计划程序（在 Windows 上）定期执行的脚本。这些脚本还可用于简单的文本处理任务。有关更多信息，请参阅有关
       <link linkend="features.commandline">PHP 的命令行用法</link>的部分。
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    PHP 可<link linkend="install">用于</link>所有主流操作系统，包括 Linux、许多 Unix 变体（包括 HP-UX、Solaris 和
    OpenBSD）、Microsoft Windows、macOS、RISC OS 以及其他操作系统。PHP 还支持当今大多数 Web 服务器。这包括 Apache、IIS
    和许多其他服务器。这包括任何可以使用 FastCGI PHP 二进制文件的 Web 服务器，如 lighttpd 和 nginx。PHP
    既可以作为模块工作，也可以作为 CGI 处理器工作。
   </para>
   <para>
    因此，使用 PHP，开发者可以自由地选择操作系统和 web
    服务器。同时，还可以在开发时选择使用面向过程或者面对对象（OOP），或者两者的混和。
   </para>
   <para>
    PHP 不仅限于输出 HTML。PHP 的功能包括输出丰富的文件类型，例如图像或 PDF 文件、加密数据和发送电子邮件。还可以轻松输出任何文本，例如
    JSON 或 XML。PHP 可以自动生成这些文件，并将它们保存在文件系统中，而不是将其打印出来，从而形成动态内容的服务器端缓存。
   </para>
   <para>
    PHP 最强大最显著的特性之一，是它支持<link
    linkend="refs.database">很大范围的数据库</link>。使用任何针对某数据库的扩展（例如 <link
    linkend="book.mysqli">mysql</link>）编写数据库支持的网页非常简单，或者使用抽象层如 <link
    linkend="book.pdo">PDO</link>，或者通过 <link linkend="book.uodbc">ODBC</link>
    扩展连接到任何支持 ODBC 标准的数据库。其它一些数据库也可能会用 <link linkend="book.curl">cURL</link>
    或者 <link linkend="book.sockets">sockets</link>，例如 CouchDB。
   </para>
   <para>
    PHP 还支持使用 LDAP、IMAP、SNMP、NNTP、POP3、HTTP、COM（Windows
    环境）等协议与其他服务通信，以及其他无数协议。还可以打开原始网络套接字并使用任何其他协议进行交互。PHP
    支持几乎所有 web 开发语言之间的 WDDX
    复杂数据交换。关于相互连接，PHP 已经支持了对 Java
    对象的实例化，并且可以无缝的将其用作 PHP 对象。
   </para>
   <para>
    PHP 具有极其有效的<link linkend="refs.basic.text">文本处理</link>特性，包括 Perl
    兼容正则表达式（<link linkend="book.pcre">PCRE</link>）以及许多扩展和工具可用于<link
    linkend="refs.xml">解析和访问 XML 文档</link>。PHP 将所有的 XML
    功能标准化于坚实的 <link linkend="book.libxml">libxml2</link> 扩展，并且还增加了
    <link linkend="book.simplexml">SimpleXML</link>，<link linkend="book.xmlreader">XMLReader</link>
    以及 <link linkend="book.xmlwriter">XMLWriter</link> 支持以扩充其功能。
   </para>
   <para>
    另外，还有很多其它有趣的扩展库，在此根据<link linkend="extensions">字母</link>和<link
    linkend="funcref">分类</link>归类列出。还有一些附加的
    <link linkend="install.pecl.intro">PECL 扩展</link> 可能有也可能没有在 PHP
    手册中列出，例如 <link xlink:href="&url.xdebug;">XDebug</link>。
   </para>
   <para>
    本页不足以列出 PHP 可以提供的所有功能和优点。请继续参阅<link
    linkend="install">安装</link>以及<link
    linkend="funcref">函数参考</link>有关章节以获取关于这里提到的扩展库更多的信息。
   </para>
  </section>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
