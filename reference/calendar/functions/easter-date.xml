<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 7706c4d3877d401e26e7f09b17f765337dd4405c Maintainer: mowangjuanzi Status: ready -->
<refentry xml:id="function.easter-date" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>easter_date</refname>
  <refpurpose>得到指定年份的复活节当地午夜时的 Unix 时间戳</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>easter_date</methodname>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>year</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer><constant>CAL_EASTER_DEFAULT</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   返回指定年份的复活节午夜时的 Unix 时间戳。
  </para>
  <para>
   复活节的日期是由尼西亚议会在公元 325 年确定的为每年春分月圆后的第一个星期日。春分一般是在 3 月 21 
   日，这就简化为只要计算满月的日期和紧挨的星期日的日期。这里所用的算法是在 532 年由 Dionysius Exiguus
   引入。在 1753 年以前用儒略历计算，一个简单的 19 年周期用于追踪月相。在 1753 年之后公历（由 
   Clavius 和 Lilius 设计，1582 年 10 月由教皇 Gregory 十三世引入，并于 1752
   年 9 月进入英国及其当时的殖民地）添加了两个校正因子以使周期更准确。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>year</parameter></term>
     <listitem>
      <para>
       对于 32 位系统，年份必须是 1970 至 2037 之间的数字，对于 64 位系统，年份必须是 1970 到 2,000,000,000
       之间的数字。如果省略或者为 &null;，则根据本地时间默认为当前年份。
      </para>
     </listitem>
    </varlistentry>  
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       当设置为 <constant>CAL_EASTER_ALWAYS_JULIAN</constant> 时，允许基于儒略历计算复活节时间。参见 
       <link linkend="calendar.constants">calendar 常量</link>。
       </para>
     </listitem>
    </varlistentry>  
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   复活节日期的 Unix 时间戳。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   如果年份早于 1970，或者晚于 32 位系统的 2037 以及 64 位系统上的 2,000,000,000
   时会抛出 <classname>ValueError</classname>。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.3.0</entry>
      <entry>
       在 64 位系统上，<parameter>year</parameter> 参数现在接受范围在 1970 到 2,000,000,000 的值。
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>year</parameter> 现在可为空（nullable）。
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       当 <parameter>year</parameter> 超出允许的范围现在抛出 <classname>ValueError</classname>。之前函数会返回
       &false; 会触发 <constant>E_WARNING</constant>。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>easter_date</function> 示例</title>
    <programlisting role="php">
<![CDATA[
<?php

echo date("M-d-Y", easter_date(1999));        // Apr-04-1999
echo date("M-d-Y", easter_date(2000));        // Apr-23-2000
echo date("M-d-Y", easter_date(2001));        // Apr-15-2001

?>
]]>
    </programlisting>
   </example>

   <example>
    <title>使用带 <classname>DateTime</classname> 的 <function>easter_date</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$timestamp = easter_date(2023);

$datetime = new \DateTime();
$datetime->setTimestamp($timestamp);

echo $datetime->format('M-d-Y'); // Apr-09-2023

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    <function>easter_date</function> 依赖于系统的 C 库 time 函数，而不是使用
    PHP 内置的 date 和 time 函数。因此 <function>easter_date</function> 使用
    <literal>TZ</literal> 环境变量来确定应该运行的时区，而不是使用 PHP
    <link linkend="ini.date.timezone">默认时区</link>
    ，此函数与 PHP 其他 date 函数一起使用时会出现意外行为。
   </para>
   <para>
    有一种解决方案，可以使用带 <classname>DateTime</classname> 和
    <classname>DateInterval</classname> 的 <function>easter_days</function>
    来计算 PHP 时区中的复活节开始时间，如下所示：
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function get_easter_datetime($year) {
    $base = new DateTime("$year-03-21");
    $days = easter_days($year);

    return $base->add(new DateInterval("P{$days}D"));
}

foreach (range(2012, 2015) as $year) {
    printf("Easter in %d is on %s\n",
           $year,
           get_easter_datetime($year)->format('F j'));
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Easter in 2012 is on April 8
Easter in 2013 is on March 31
Easter in 2014 is on April 20
Easter in 2015 is on April 5
]]>
    </screen>
   </informalexample>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     <function>easter_days</function> 用于计算 1970 年之前或 2037 年之后的复活节。
    </member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
